import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { FileText, Pill, Calculator, WifiOff, Plus, Search, Eye, Bell, Shield, Users, Briefcase } from "lucide-react";
import { useUserTier } from "@/hooks/useUserTier";
import { useState } from "react";
import { useLocation } from "wouter";
import ProtocolUpload from "@/components/protocol-upload";
import ApgarCalculator from "@/components/apgar-calculator";
import PediatricDoseCalculator from "@/components/pediatric-dose-calculator";
import IVDripCalculator from "@/components/iv-drip-calculator";
import GlasgowComaCalculator from "@/components/glasgow-coma-calculator";
import BMICalculator from "@/components/bmi-calculator";
import CardiacOutputCalculator from "@/components/cardiac-output-calculator";
import BurnSurfaceCalculator from "@/components/burn-surface-calculator";
import OxygenTankCalculator from "@/components/oxygen-tank-calculator";
import EmergencyProtocolsModule from "@/components/emergency-protocols-module";
import QuickAccessWidget from "@/components/quick-access-widget";
import ProtocolSearch from "@/components/protocol-search";
import MedicationInteractionChecker from "@/components/medication-interaction-checker";
import RealTimeAlertSystem from "@/components/real-time-alert-system";
import ProtocolDetailViewer from "@/components/protocol-detail-viewer";
export default function Dashboard() {
    const [showUpload, setShowUpload] = useState(false);
    const [showApgar, setShowApgar] = useState(false);
    const [showPediatricDose, setShowPediatricDose] = useState(false);
    const [showIVDrip, setShowIVDrip] = useState(false);
    const [showGlasgowComa, setShowGlasgowComa] = useState(false);
    // Debug state changes
    console.log("Dashboard render - Calculator states:", {
        showApgar, showPediatricDose, showIVDrip, showGlasgowComa
    });
    const [showBMI, setShowBMI] = useState(false);
    const [showCardiacOutput, setShowCardiacOutput] = useState(false);
    const [showBurnSurface, setShowBurnSurface] = useState(false);
    const [showOxygenTank, setShowOxygenTank] = useState(false);
    const [showEmergencyProtocols, setShowEmergencyProtocols] = useState(false);
    const [showProtocolSearch, setShowProtocolSearch] = useState(false);
    const [showMedicationChecker, setShowMedicationChecker] = useState(false);
    const [showAlertSystem, setShowAlertSystem] = useState(false);
    const [selectedProtocolId, setSelectedProtocolId] = useState(null);
    const [userRole, setUserRole] = useState("EMT");
    const [, setLocation] = useLocation();
    const { userTier, switchTier, isBasic, isPro } = useUserTier();
    const { data: stats, isLoading: statsLoading } = useQuery({
        queryKey: ["/api/dashboard/stats"],
        queryFn: async () => {
            const response = await fetch("/api/dashboard/stats?userId=1");
            return response.json();
        },
    });
    const { data: protocols, isLoading: protocolsLoading } = useQuery({
        queryKey: ["/api/protocols"],
        queryFn: async () => {
            const response = await fetch("/api/protocols?userId=1");
            return response.json();
        },
    });
    const { data: medications, isLoading: medicationsLoading } = useQuery({
        queryKey: ["/api/medications"],
        queryFn: async () => {
            const response = await fetch("/api/medications");
            return response.json();
        },
    });
    const categoryColors = {
        cardiac: "bg-red-600", // EMS Red for cardiac emergencies
        respiratory: "bg-blue-600", // ProMedix Blue for respiratory
        trauma: "bg-orange-600", // Warning Orange for trauma
        pediatric: "bg-purple-600", // Purple for pediatric care
        neurological: "bg-green-600", // Success Green for neurological
        toxicology: "bg-yellow-600", // Caution Yellow for toxicology
        operations: "bg-gray-600", // Neutral Gray for operations
        adult_treatment: "bg-blue-600", // ProMedix Blue for adult treatment
        adult_pediatric: "bg-purple-600", // Purple for combined care
    };
    console.log("Dashboard background class:", "bg-background", "for tier:", userTier);
    return (_jsxs("div", { className: "min-h-screen bg-gradient-to-br from-background via-background to-primary/5", children: [_jsxs("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 text-foreground", children: [_jsxs("div", { className: "mb-8", children: [_jsx("div", { className: "mb-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-4xl font-bold text-foreground bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent", children: "Dashboard" }), _jsx("p", { className: "mt-3 text-muted-foreground text-lg", children: "Welcome back! Here's your ProMedix EMS overview." }), _jsx("div", { className: "mt-4", children: _jsx(Badge, { variant: isBasic ? "default" : "secondary", className: `${isBasic ? "bg-gradient-to-r from-primary to-primary/80" : "bg-gradient-to-r from-secondary to-secondary/80"} text-white px-4 py-2 text-sm font-semibold shadow-lg`, children: isBasic ? "Basic Mode - Educational Tools" : "Pro Mode - Field Professional Tools" }) })] }), _jsxs("div", { className: "flex items-center gap-3", children: [_jsx("span", { className: "text-sm font-medium text-foreground", children: "Mode:" }), _jsxs("div", { className: "flex rounded-xl p-1.5 bg-muted/50 backdrop-blur-sm border border-border/50", children: [_jsxs(Button, { variant: isBasic ? "default" : "ghost", size: "sm", onClick: () => {
                                                                console.log("Switching to basic mode");
                                                                switchTier('basic');
                                                                setLocation('/');
                                                            }, className: isBasic ? "bg-primary text-primary-foreground hover:bg-primary/90 shadow-md" : "text-muted-foreground hover:bg-muted/80 hover:text-foreground", children: [_jsx(Users, { className: "h-4 w-4 mr-1" }), "Basic"] }), _jsxs(Button, { variant: isPro ? "default" : "ghost", size: "sm", onClick: () => {
                                                                console.log("Switching to pro mode");
                                                                switchTier('pro');
                                                                setLocation('/pro');
                                                            }, className: isPro ? "bg-secondary text-secondary-foreground hover:bg-secondary/90 shadow-md" : "text-muted-foreground hover:bg-muted/80 hover:text-foreground", children: [_jsx(Briefcase, { className: "h-4 w-4 mr-1" }), "Pro"] })] })] })] }) }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8", children: [_jsx(Card, { className: "border-0 shadow-lg bg-gradient-to-br from-primary/10 to-primary/5 hover:shadow-xl transition-all duration-300 group", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "p-4 bg-primary/20 rounded-2xl group-hover:bg-primary/30 transition-colors duration-300", children: _jsx(FileText, { className: "h-7 w-7 text-primary" }) }), _jsxs("div", { className: "ml-4", children: [_jsx("p", { className: "text-sm text-muted-foreground font-medium", children: "My Protocols" }), _jsx("p", { className: "text-3xl font-bold text-foreground", children: statsLoading ? "..." : stats?.myProtocols || 0 })] })] }) }) }), _jsx(Card, { className: "border-0 shadow-lg bg-gradient-to-br from-secondary/10 to-secondary/5 hover:shadow-xl transition-all duration-300 group", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "p-4 bg-secondary/20 rounded-2xl group-hover:bg-secondary/30 transition-colors duration-300", children: _jsx(Pill, { className: "h-7 w-7 text-secondary" }) }), _jsxs("div", { className: "ml-4", children: [_jsx("p", { className: "text-sm text-muted-foreground font-medium", children: "Medications" }), _jsx("p", { className: "text-3xl font-bold text-foreground", children: statsLoading ? "..." : stats?.medications || 0 })] })] }) }) }), _jsx(Card, { className: "border-0 shadow-lg bg-gradient-to-br from-orange-500/10 to-orange-500/5 hover:shadow-xl transition-all duration-300 group", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "p-4 bg-orange-500/20 rounded-2xl group-hover:bg-orange-500/30 transition-colors duration-300", children: _jsx(Calculator, { className: "h-7 w-7 text-orange-500" }) }), _jsxs("div", { className: "ml-4", children: [_jsx("p", { className: "text-sm text-muted-foreground font-medium", children: "Calculators" }), _jsx("p", { className: "text-3xl font-bold text-foreground", children: statsLoading ? "..." : stats?.calculators || 0 })] })] }) }) }), _jsx(Card, { className: "border-0 shadow-lg bg-gradient-to-br from-green-500/10 to-green-500/5 hover:shadow-xl transition-all duration-300 group", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center", children: [_jsx("div", { className: "p-4 bg-green-500/20 rounded-2xl group-hover:bg-green-500/30 transition-colors duration-300", children: _jsx(WifiOff, { className: "h-7 w-7 text-green-500" }) }), _jsxs("div", { className: "ml-4", children: [_jsx("p", { className: "text-sm text-muted-foreground font-medium", children: "Offline Ready" }), _jsx("p", { className: "text-3xl font-bold text-foreground", children: statsLoading ? "..." : stats?.offlineReady || 0 })] })] }) }) })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-8", children: [_jsx("div", { className: "lg:col-span-2", children: _jsxs(Card, { children: [_jsx(CardHeader, { className: "border-b", children: _jsx(CardTitle, { children: "Quick Actions & Enhanced Features" }) }), _jsxs(CardContent, { className: "p-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: [_jsx(Card, { className: "border-2 border-dashed border-blue-300 hover:border-blue-500 transition-colors cursor-pointer bg-blue-50/50 dark:bg-blue-900/20", onClick: () => setShowProtocolSearch(true), children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "p-2 bg-primary rounded-full", children: _jsx(Search, { className: "h-5 w-5 text-white" }) }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold text-primary dark:text-primary", children: "Protocol Search" }), _jsx("p", { className: "text-sm text-primary/70 dark:text-primary/80", children: "Advanced search with decision-tree navigation" })] })] }) }) }), _jsx(Card, { className: "border-2 border-dashed border-orange-300 hover:border-orange-500 transition-colors cursor-pointer bg-orange-50/50 dark:bg-orange-900/20", onClick: () => setLocation('/calculators'), children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "p-2 bg-orange-600 rounded-full", children: _jsx(Calculator, { className: "h-5 w-5 text-white" }) }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold text-orange-700 dark:text-orange-300", children: "Field Calculators" }), _jsx("p", { className: "text-sm text-orange-600 dark:text-orange-400", children: "Essential medical calculations" })] })] }) }) }), _jsx(Card, { className: "border-2 border-dashed border-red-300 hover:border-red-500 transition-colors cursor-pointer bg-red-50/50 dark:bg-red-900/20", onClick: () => setLocation('/medications'), children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "p-2 bg-secondary rounded-full", children: _jsx(Shield, { className: "h-5 w-5 text-white" }) }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold text-secondary dark:text-secondary", children: "Medication Lookup" }), _jsx("p", { className: "text-sm text-secondary/70 dark:text-secondary/80", children: "Quick drug reference and dosing" })] })] }) }) }), _jsx(Card, { className: "border-2 border-dashed border-green-300 hover:border-green-500 transition-colors cursor-pointer bg-green-50/50 dark:bg-green-900/20", onClick: () => setShowEmergencyProtocols(true), children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "p-2 bg-green-600 rounded-full", children: _jsx(FileText, { className: "h-5 w-5 text-white" }) }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold text-green-700 dark:text-green-300", children: "Emergency Protocols" }), _jsx("p", { className: "text-sm text-green-600 dark:text-green-400", children: "Access critical care protocols instantly" })] })] }) }) }), _jsx(Card, { className: "border-2 border-dashed border-purple-300 hover:border-purple-500 transition-colors cursor-pointer bg-purple-50/50 dark:bg-purple-900/20", onClick: () => setShowUpload(true), children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "p-2 bg-purple-600 rounded-full", children: _jsx(Plus, { className: "h-5 w-5 text-white" }) }), _jsxs("div", { children: [_jsx("h3", { className: "font-semibold text-purple-700 dark:text-purple-300", children: "Protocol Upload" }), _jsx("p", { className: "text-sm text-purple-600 dark:text-purple-400", children: "Add custom protocols" })] })] }) }) })] }), _jsxs("div", { className: "mt-6", children: [_jsx("h3", { className: "font-semibold mb-3", children: "Recent Medications" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3", children: medicationsLoading ? (_jsx("div", { className: "text-center py-4 text-muted-foreground", children: "Loading medications..." })) : (medications?.slice(0, 6).map((medication) => (_jsx(Card, { className: "hover:shadow-md transition-shadow cursor-pointer hover:bg-muted/50", onClick: () => setLocation(`/medications?search=${encodeURIComponent(medication.name)}`), children: _jsx(CardContent, { className: "p-3", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex-1", children: [_jsx("h4", { className: "font-medium text-sm text-primary", children: medication.name }), _jsx("p", { className: "text-xs text-muted-foreground", children: medication.scope }), medication.indication && (_jsx("p", { className: "text-xs text-secondary mt-1 truncate", children: medication.indication }))] }), _jsx(Badge, { variant: "outline", className: "text-xs ml-2", children: medication.category })] }) }) }, medication.id)))) })] })] })] }) }), _jsxs("div", { className: "space-y-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "User Role" }) }), _jsx(CardContent, { children: _jsxs(Select, { value: userRole, onValueChange: (value) => setUserRole(value), children: [_jsx(SelectTrigger, { children: _jsx(SelectValue, { placeholder: "Select your role" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "EMR", children: "EMR - Emergency Medical Responder" }), _jsx(SelectItem, { value: "EMT", children: "EMT - Emergency Medical Technician" }), _jsx(SelectItem, { value: "AEMT", children: "AEMT - Advanced Emergency Medical Technician" }), _jsx(SelectItem, { value: "Paramedic", children: "Paramedic" })] })] }) })] }), _jsx(QuickAccessWidget, { userRole: userRole, userTier: userTier, onProtocolClick: (protocolId) => {
                                            console.log("Open protocol:", protocolId);
                                            setShowEmergencyProtocols(true);
                                        }, onCalculatorClick: (calculatorType) => {
                                            console.log("Calculator clicked:", calculatorType);
                                            switch (calculatorType) {
                                                case "apgar":
                                                    console.log("Opening APGAR calculator");
                                                    console.log("Current showApgar state:", showApgar);
                                                    setShowApgar(true);
                                                    console.log("Set showApgar to true");
                                                    break;
                                                case "pediatric-dose":
                                                    console.log("Opening Pediatric Dose calculator");
                                                    setShowPediatricDose(true);
                                                    break;
                                                case "iv-drip":
                                                    console.log("Opening IV Drip calculator");
                                                    setShowIVDrip(true);
                                                    break;
                                                case "glasgow-coma":
                                                    console.log("Opening Glasgow Coma calculator");
                                                    setShowGlasgowComa(true);
                                                    break;
                                                case "bmi":
                                                    console.log("Opening BMI calculator");
                                                    setShowBMI(true);
                                                    break;
                                                case "cardiac-output":
                                                    console.log("Opening Cardiac Output calculator");
                                                    setShowCardiacOutput(true);
                                                    break;
                                                case "burn-surface":
                                                    console.log("Opening Burn Surface calculator");
                                                    setShowBurnSurface(true);
                                                    break;
                                                case "oxygen-tank":
                                                    console.log("Opening Oxygen Tank calculator");
                                                    setShowOxygenTank(true);
                                                    break;
                                                default:
                                                    console.log("Unknown calculator type:", calculatorType);
                                                    break;
                                            }
                                        } }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "flex items-center gap-2", children: [_jsx(Bell, { className: "h-5 w-5" }), "Real-Time Alerts"] }) }), _jsx(CardContent, { children: _jsxs(Button, { onClick: () => setShowAlertSystem(true), className: "w-full bg-red-500 hover:bg-red-600 text-white", children: [_jsx(Bell, { className: "h-4 w-4 mr-2" }), "View Active Alerts"] }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Quick Calculators" }) }), _jsxs(CardContent, { className: "grid grid-cols-1 gap-3", children: [_jsx(Button, { className: "btn-ems-primary h-auto p-4 justify-start", onClick: () => setShowApgar(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "APGAR Score" }), _jsx("div", { className: "text-sm opacity-90", children: "Newborn assessment" })] })] }) }), _jsx(Button, { className: "btn-ems-emergency h-auto p-4 justify-start", onClick: () => setShowPediatricDose(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Pediatric Dose" }), _jsx("div", { className: "text-sm opacity-90", children: "Weight-based dosing" })] })] }) }), _jsx(Button, { className: "bg-green-500 text-white hover:bg-green-500/90 h-auto p-4 justify-start", onClick: () => setShowIVDrip(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "IV Drip Rate" }), _jsx("div", { className: "text-sm opacity-90", children: "Fluid calculations" })] })] }) }), _jsx(Button, { className: "bg-red-500 text-white hover:bg-red-500/90 h-auto p-4 justify-start", onClick: () => setShowEmergencyProtocols(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(FileText, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Emergency Protocols" }), _jsx("div", { className: "text-sm opacity-90", children: "EMS protocols by scope" })] })] }) }), _jsx(Button, { className: "bg-blue-500 text-white hover:bg-blue-500/90 h-auto p-4 justify-start", onClick: () => setShowProtocolSearch(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Search, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Protocol Search" }), _jsx("div", { className: "text-sm opacity-90", children: "Find protocols quickly" })] })] }) }), _jsx(Button, { className: "bg-pink-500 text-white hover:bg-pink-500/90 h-auto p-4 justify-start", onClick: () => setShowMedicationChecker(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Pill, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Medication Checker" }), _jsx("div", { className: "text-sm opacity-90", children: "Drug interactions" })] })] }) }), _jsx(Button, { className: "bg-purple-500 text-white hover:bg-purple-500/90 h-auto p-4 justify-start", onClick: () => setShowGlasgowComa(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Glasgow Coma Scale" }), _jsx("div", { className: "text-sm opacity-90", children: "Neurological assessment" })] })] }) }), _jsx(Button, { className: "bg-teal-500 text-white hover:bg-teal-500/90 h-auto p-4 justify-start", onClick: () => setShowBMI(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "BMI Calculator" }), _jsx("div", { className: "text-sm opacity-90", children: "Body mass index" })] })] }) }), _jsx(Button, { className: "bg-indigo-500 text-white hover:bg-indigo-500/90 h-auto p-4 justify-start", onClick: () => setShowCardiacOutput(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Cardiac Output" }), _jsx("div", { className: "text-sm opacity-90", children: "Hemodynamic calculations" })] })] }) }), _jsx(Button, { className: "bg-orange-500 text-white hover:bg-orange-500/90 h-auto p-4 justify-start", onClick: () => setShowBurnSurface(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Burn Surface Area" }), _jsx("div", { className: "text-sm opacity-90", children: "Rule of Nines" })] })] }) }), _jsx(Button, { className: "bg-cyan-500 text-white hover:bg-cyan-500/90 h-auto p-4 justify-start", onClick: () => setShowOxygenTank(true), children: _jsxs("div", { className: "flex items-center", children: [_jsx(Calculator, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Oxygen Tank Duration" }), _jsx("div", { className: "text-sm opacity-90", children: "Tank calculations" })] })] }) }), isPro && (_jsx(Button, { className: "bg-purple-500 text-white hover:bg-purple-500/90 h-auto p-4 justify-start", onClick: () => window.location.href = '/pro', children: _jsxs("div", { className: "flex items-center", children: [_jsx(Briefcase, { className: "h-5 w-5 mr-3" }), _jsxs("div", { className: "text-left", children: [_jsx("div", { className: "font-medium", children: "Pro Field Tools" }), _jsx("div", { className: "text-sm opacity-90", children: "Advanced professional tools" })] })] }) }))] })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { children: "Recent Medications" }) }), _jsx(CardContent, { children: medicationsLoading ? (_jsx("div", { className: "text-center py-4", children: "Loading medications..." })) : (_jsx("div", { className: "space-y-3", children: Array.isArray(medications) ? (medications.slice(0, 3).map((medication) => (_jsxs("div", { className: "flex items-center justify-between p-3 bg-muted/50 rounded-lg", children: [_jsxs("div", { children: [_jsx("div", { className: "font-medium", children: medication.name }), _jsxs("div", { className: "text-sm text-muted-foreground", children: [medication.indications?.[0], " \u2022 ", medication.adultDose] })] }), _jsx(Button, { variant: "ghost", size: "sm", children: _jsx(Eye, { className: "h-4 w-4" }) })] }, medication.id)))) : (_jsx("div", { className: "text-center py-4", children: "No medications available" })) })) })] })] })] })] }), _jsx(ProtocolUpload, { open: showUpload, onOpenChange: setShowUpload }), _jsx(ApgarCalculator, { open: showApgar, onOpenChange: setShowApgar }), _jsx(PediatricDoseCalculator, { open: showPediatricDose, onOpenChange: setShowPediatricDose }), _jsx(IVDripCalculator, { open: showIVDrip, onOpenChange: setShowIVDrip }), _jsx(GlasgowComaCalculator, { open: showGlasgowComa, onOpenChange: setShowGlasgowComa }), _jsx(BMICalculator, { open: showBMI, onOpenChange: setShowBMI }), _jsx(CardiacOutputCalculator, { open: showCardiacOutput, onOpenChange: setShowCardiacOutput }), _jsx(BurnSurfaceCalculator, { open: showBurnSurface, onOpenChange: setShowBurnSurface }), _jsx(OxygenTankCalculator, { open: showOxygenTank, onOpenChange: setShowOxygenTank }), _jsx(EmergencyProtocolsModule, { open: showEmergencyProtocols, onOpenChange: setShowEmergencyProtocols }), _jsx(ProtocolSearch, { open: showProtocolSearch, onOpenChange: setShowProtocolSearch }), _jsx(MedicationInteractionChecker, { open: showMedicationChecker, onOpenChange: setShowMedicationChecker }), _jsx(RealTimeAlertSystem, { open: showAlertSystem, onOpenChange: setShowAlertSystem }), _jsx(ProtocolDetailViewer, { protocolId: selectedProtocolId, open: !!selectedProtocolId, onOpenChange: (open) => !open && setSelectedProtocolId(null) })] }));
}
